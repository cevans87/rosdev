from atools import memoize
from dataclasses import dataclass
from base64 import b64decode, b64encode
# noinspection PyPackageRequirements
from Crypto import Random
# noinspection PyPackageRequirements
from Crypto.Cipher import AES
# noinspection PyPackageRequirements,PyProtectedMember
from Crypto.Cipher._mode_cbc import CbcMode
# noinspection PyPackageRequirements
from Crypto.Util import Padding
from logging import getLogger
from pathlib import Path
from textwrap import dedent

from rosdev.gen.host import GenHost
from rosdev.gen.idea.home import GenIdeaHome
from rosdev.util.handler import Handler
from rosdev.util.options import Options

log = getLogger(__name__)


@dataclass(frozen=True)
class GenIdeaCPwd(Handler):

    @classmethod
    @memoize
    async def get_cipher(cls, options: Options) -> CbcMode:
        cipher = AES.new(key=b'Proxy Config Sec', mode=AES.MODE_CBC, iv=await cls.get_iv(options))

        log.debug(f'{cls.__name__} {cipher = }')

        return cipher

    # noinspection PyUnusedLocal
    @classmethod
    @memoize
    async def get_decoded_data(cls, options: Options) -> bytes:
        try:
            decoded_data = b64decode(
                GenHost.read_bytes(path=await cls.get_path(options)).strip().split()[-1]
            )
        except FileNotFoundError:
            iv = Random.new().read(AES.block_size)
            cipher = AES.new(key=b'Proxy Config Sec', mode=AES.MODE_CBC, iv=iv)
            decoded_data = b64decode(b64encode(bytes([
                0, 0, 0, 16,
                *iv,
                *cipher.encrypt(Padding.pad(b'rosdev', block_size=16))
            ])))
            assert iv == decoded_data[4:20]

        assert (
                (
                        (decoded_data[0] << 24) +
                        (decoded_data[1] << 16) +
                        (decoded_data[2] << 8) +
                        (decoded_data[3] << 0)
                ) == 16
        ), 'Expected decoded data to have iv_len field with value 16'

        log.debug(f'{cls.__name__} {decoded_data = }')

        return decoded_data

    @classmethod
    @memoize
    async def get_encoded_data(cls, options: Options) -> bytes:
        encoded_data = b64encode(await cls.get_decoded_data(options))
        
        log.debug(f'{cls.__name__} {encoded_data = }')
        
        return encoded_data

    @classmethod
    @memoize
    async def get_iv(cls, options: Options) -> bytes:
        iv = (await cls.get_decoded_data(options))[4:20]

        log.debug(f'{cls.__name__} {iv = }')

        return iv

    # noinspection PyUnusedLocal
    @classmethod
    @memoize
    async def get_path(cls, options: Options) -> Path:
        path = await GenIdeaHome.get_path(options) / 'c.pwd'
        
        log.debug(f'{cls.__name__} {path = }')
        
        return path

    @classmethod
    @memoize
    async def get_password(cls, options: Options) -> str:
        password = Padding.unpad(
            (await cls.get_cipher(options)).decrypt((await cls.get_decoded_data(options))[20:]),
            block_size=16,
        ).decode()

        log.debug(f'{cls.__name__} {password}')

        return password
    
    @classmethod
    @memoize
    async def get_bytes(cls, options: Options) -> bytes:
        # noinspection PyShadowingBuiltins
        bytes = dedent(f'''
            encryption: BUILT_IN
            isAutoGenerated: false
            value: !!binary {(await cls.get_encoded_data(options)).decode()}
        ''').strip().encode()
        
        log.debug(f'{cls.__name__} {bytes = }')
        
        return bytes

    @classmethod
    async def main(cls, options: Options) -> None:
        GenHost.write_bytes(
            data=await cls.get_bytes(options),
            options=options,
            path=await cls.get_path(options),
        )
