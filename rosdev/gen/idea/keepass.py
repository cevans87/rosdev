from dataclasses import dataclass, field, replace
from base64 import b64decode, b64encode
# noinspection PyPackageRequirements
from Crypto import Random
# noinspection PyPackageRequirements
from Crypto.Cipher import AES
# noinspection PyPackageRequirements
from Crypto.Util import Padding
from logging import getLogger
import os
from pathlib import Path
from pykeepass import PyKeePass
from textwrap import dedent
from typing import Tuple, Type

from rosdev.gen.idea.base import GenIdeaBase
from rosdev.gen.idea.uuid import GenIdeaUuid
from rosdev.util.handler import Handler
from rosdev.util.options import Options
from rosdev.util.subprocess import exec


log = getLogger(__name__)


@dataclass(frozen=True)
class GenIdeaKeepass(Handler):

    pre_dependencies: Tuple[Type[Handler], ...] = field(init=False, default=(
        GenIdeaBase,
        GenIdeaUuid,
    ))

    @classmethod
    async def resolve_options(cls, options: Options) -> Options:
        idea_c_pwd_universal_path = options.resolve_path(
            options.idea_c_pwd_universal_path
        )

        idea_c_kdbx_universal_path = options.resolve_path(
            options.idea_c_kdbx_universal_path
        )
        
        idea_c_kdbx_decoded_data = options.idea_c_kdbx_decoded_data
        if idea_c_kdbx_decoded_data is None:
            try:
                with open(str(idea_c_pwd_universal_path), 'rb') as f_in:
                    idea_c_kdbx_decoded_data = b64decode(f_in.read().strip().split()[-1])
            except FileNotFoundError:
                iv = Random.new().read(AES.block_size)
                cipher = AES.new(key=b'Proxy Config Sec', mode=AES.MODE_CBC, iv=iv)
                idea_c_kdbx_decoded_data = b64decode(b64encode(bytes([
                    0, 0, 0, 16,
                    *iv,
                    *cipher.encrypt(Padding.pad(b'rosdev', block_size=16))
                ])))
                assert iv == idea_c_kdbx_decoded_data[4:20]

        return replace(
            options,
            idea_c_pwd_universal_path=idea_c_pwd_universal_path,
            idea_c_kdbx_universal_path=idea_c_kdbx_universal_path,
            idea_c_kdbx_decoded_data=idea_c_kdbx_decoded_data,
        )

    @classmethod
    async def validate_options(cls, options: Options) -> None:
        # TODO py38 debug print
        log.debug(f'idea_c_pwd_universal_path: {options.idea_c_pwd_universal_path}')
        log.debug(f'idea_c_kdbx_universal_path: {options.idea_c_kdbx_universal_path}')
        log.debug(f'idea_c_kdbx_decoded_data: {options.idea_c_kdbx_decoded_data}')

        assert (
            (
                (options.idea_c_kdbx_decoded_data[0] << 24) +
                (options.idea_c_kdbx_decoded_data[1] << 16) +
                (options.idea_c_kdbx_decoded_data[2] << 8) +
                (options.idea_c_kdbx_decoded_data[3] << 0)
            ) == 16
        ), 'Expected decoded data to have iv_len field with value 16'

    @classmethod
    async def main(cls, options: Options) -> None:
        iv = options.idea_c_kdbx_decoded_data[4:20]
        cipher = AES.new(key=b'Proxy Config Sec', mode=AES.MODE_CBC, iv=iv)
        password = Padding.unpad(
            cipher.decrypt(options.idea_c_kdbx_decoded_data[20:]),
            block_size=16,
        ).decode()

        if not options.idea_c_kdbx_universal_path.is_file():
            await exec(f'cp {Path(__file__).parent}/c.kdbx {options.idea_c_kdbx_universal_path}')
        with PyKeePass(str(options.idea_c_kdbx_universal_path), password=password) as db:
            # TODO remove stale entries
            group = db.find_groups(name='IntelliJ Platform', first=True)
            if group is None:
                group = db.add_group(
                    destination_group=db.root_group,
                    group_name='IntelliJ Platform'
                )

            db.add_entry(
                destination_group=group,
                title=f'IntelliJ Platform Deployment â€” {options.idea_uuid}',
                username=os.getlogin(),
                password=password,
            )

            db.save(str(options.idea_c_kdbx_universal_path))
            
        with open(str(options.idea_c_pwd_universal_path), 'wb') as f_out:
            f_out.write(dedent(f'''
                encryption: BUILT_IN
                isAutoGenerated: false
                value: !!binary {b64encode(options.idea_c_kdbx_decoded_data).decode()}
            ''').strip().encode())
